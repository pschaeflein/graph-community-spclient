// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Graph.Community.Models {
    public class TimeZoneInformation : IParsable 
    {
        /// <summary>The Bias property</summary>
        public int? Bias { get; set; }
        /// <summary>The DaylightBias property</summary>
        public int? DaylightBias { get; set; }
        /// <summary>The StandardBias property</summary>
        public int? StandardBias { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TimeZoneInformation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TimeZoneInformation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TimeZoneInformation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"Bias", n => { Bias = n.GetIntValue(); } },
                {"DaylightBias", n => { DaylightBias = n.GetIntValue(); } },
                {"StandardBias", n => { StandardBias = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("Bias", Bias);
            writer.WriteIntValue("DaylightBias", DaylightBias);
            writer.WriteIntValue("StandardBias", StandardBias);
        }
    }
}
