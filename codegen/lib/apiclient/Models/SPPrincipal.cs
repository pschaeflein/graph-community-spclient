// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Graph.Community.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SPPrincipal : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The member identifier for the user or group.</summary>
        public int? Id { get; set; }
        /// <summary>Whether this member should be hidden in the UI.</summary>
        public bool? IsHiddenInUI { get; set; }
        /// <summary>The login name of the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LoginName { get; set; }
#nullable restore
#else
        public string LoginName { get; set; }
#endif
        /// <summary>Discriminator property for SPPrincipal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>A bitwise value containing the type of the principal (SP.PrincipalType):None = 0User = 1DistributionList = 2SecurityGroup = 4SharePointGroup = 8All = 15</summary>
        public int? PrincipalType { get; set; }
        /// <summary>The name of the principal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Graph.Community.Models.SPPrincipal"/> and sets the default values.
        /// </summary>
        public SPPrincipal()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Graph.Community.Models.SPPrincipal"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Graph.Community.Models.SPPrincipal CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#SP.Group" => new global::Graph.Community.Models.SPGroup(),
                "#SP.User" => new global::Graph.Community.Models.SPUser(),
                _ => new global::Graph.Community.Models.SPPrincipal(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "Id", n => { Id = n.GetIntValue(); } },
                { "IsHiddenInUI", n => { IsHiddenInUI = n.GetBoolValue(); } },
                { "LoginName", n => { LoginName = n.GetStringValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "PrincipalType", n => { PrincipalType = n.GetIntValue(); } },
                { "Title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("Id", Id);
            writer.WriteBoolValue("IsHiddenInUI", IsHiddenInUI);
            writer.WriteStringValue("LoginName", LoginName);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteIntValue("PrincipalType", PrincipalType);
            writer.WriteStringValue("Title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
