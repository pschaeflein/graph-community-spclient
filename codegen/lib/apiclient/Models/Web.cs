// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Kiota.SharePoint.Client.Models {
    public class Web : IParsable 
    {
        /// <summary>The associatedMemberGroup property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Group? AssociatedMemberGroup { get; set; }
#nullable restore
#else
        public Group AssociatedMemberGroup { get; set; }
#endif
        /// <summary>The associatedMemberGroupNavigationLink property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssociatedMemberGroupNavigationLink { get; set; }
#nullable restore
#else
        public string AssociatedMemberGroupNavigationLink { get; set; }
#endif
        /// <summary>The associatedOwnerGroup property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Group? AssociatedOwnerGroup { get; set; }
#nullable restore
#else
        public Group AssociatedOwnerGroup { get; set; }
#endif
        /// <summary>The associatedOwnerGroupNavigationLink property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssociatedOwnerGroupNavigationLink { get; set; }
#nullable restore
#else
        public string AssociatedOwnerGroupNavigationLink { get; set; }
#endif
        /// <summary>The associatedVisitorGroup property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Group? AssociatedVisitorGroup { get; set; }
#nullable restore
#else
        public Group AssociatedVisitorGroup { get; set; }
#endif
        /// <summary>The associatedVisitorGroupNavigationLink property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssociatedVisitorGroupNavigationLink { get; set; }
#nullable restore
#else
        public string AssociatedVisitorGroupNavigationLink { get; set; }
#endif
        /// <summary>The currentChangeToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ChangeToken? CurrentChangeToken { get; set; }
#nullable restore
#else
        public ChangeToken CurrentChangeToken { get; set; }
#endif
        /// <summary>The footerEnabled property</summary>
        public bool? FooterEnabled { get; set; }
        /// <summary>The footerLayout property</summary>
        public int? FooterLayout { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The regionalSettings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Kiota.SharePoint.Client.Models.RegionalSettings? RegionalSettings { get; set; }
#nullable restore
#else
        public Kiota.SharePoint.Client.Models.RegionalSettings RegionalSettings { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<User>? Users { get; private set; }
#nullable restore
#else
        public List<User> Users { get; private set; }
#endif
        /// <summary>The usersNavigationLink property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsersNavigationLink { get; set; }
#nullable restore
#else
        public string UsersNavigationLink { get; set; }
#endif
        /// <summary>The welcomePage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WelcomePage { get; set; }
#nullable restore
#else
        public string WelcomePage { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Web"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Web CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Web();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"associatedMemberGroup", n => { AssociatedMemberGroup = n.GetObjectValue<Group>(Group.CreateFromDiscriminatorValue); } },
                {"associatedMemberGroupNavigationLink", n => { AssociatedMemberGroupNavigationLink = n.GetStringValue(); } },
                {"associatedOwnerGroup", n => { AssociatedOwnerGroup = n.GetObjectValue<Group>(Group.CreateFromDiscriminatorValue); } },
                {"associatedOwnerGroupNavigationLink", n => { AssociatedOwnerGroupNavigationLink = n.GetStringValue(); } },
                {"associatedVisitorGroup", n => { AssociatedVisitorGroup = n.GetObjectValue<Group>(Group.CreateFromDiscriminatorValue); } },
                {"associatedVisitorGroupNavigationLink", n => { AssociatedVisitorGroupNavigationLink = n.GetStringValue(); } },
                {"currentChangeToken", n => { CurrentChangeToken = n.GetObjectValue<ChangeToken>(ChangeToken.CreateFromDiscriminatorValue); } },
                {"footerEnabled", n => { FooterEnabled = n.GetBoolValue(); } },
                {"footerLayout", n => { FooterLayout = n.GetIntValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"regionalSettings", n => { RegionalSettings = n.GetObjectValue<Kiota.SharePoint.Client.Models.RegionalSettings>(Kiota.SharePoint.Client.Models.RegionalSettings.CreateFromDiscriminatorValue); } },
                {"title", n => { Title = n.GetStringValue(); } },
                {"users", n => { Users = n.GetCollectionOfObjectValues<User>(User.CreateFromDiscriminatorValue)?.ToList(); } },
                {"usersNavigationLink", n => { UsersNavigationLink = n.GetStringValue(); } },
                {"welcomePage", n => { WelcomePage = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Group>("associatedMemberGroup", AssociatedMemberGroup);
            writer.WriteStringValue("associatedMemberGroupNavigationLink", AssociatedMemberGroupNavigationLink);
            writer.WriteObjectValue<Group>("associatedOwnerGroup", AssociatedOwnerGroup);
            writer.WriteStringValue("associatedOwnerGroupNavigationLink", AssociatedOwnerGroupNavigationLink);
            writer.WriteObjectValue<Group>("associatedVisitorGroup", AssociatedVisitorGroup);
            writer.WriteStringValue("associatedVisitorGroupNavigationLink", AssociatedVisitorGroupNavigationLink);
            writer.WriteObjectValue<ChangeToken>("currentChangeToken", CurrentChangeToken);
            writer.WriteBoolValue("footerEnabled", FooterEnabled);
            writer.WriteIntValue("footerLayout", FooterLayout);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<Kiota.SharePoint.Client.Models.RegionalSettings>("regionalSettings", RegionalSettings);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("usersNavigationLink", UsersNavigationLink);
            writer.WriteStringValue("welcomePage", WelcomePage);
        }
    }
}
