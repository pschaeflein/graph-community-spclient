// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Kiota.SharePoint.Client.Models {
    public class RegionalSettings : IParsable 
    {
        /// <summary>The adjustHijriDays property</summary>
        public int? AdjustHijriDays { get; set; }
        /// <summary>The alternateCalendarType property</summary>
        public int? AlternateCalendarType { get; set; }
        /// <summary>The am property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Am { get; set; }
#nullable restore
#else
        public string Am { get; set; }
#endif
        /// <summary>The calendarType property</summary>
        public int? CalendarType { get; set; }
        /// <summary>The collation property</summary>
        public int? Collation { get; set; }
        /// <summary>The collationLCID property</summary>
        public int? CollationLCID { get; set; }
        /// <summary>The dateFormat property</summary>
        public int? DateFormat { get; set; }
        /// <summary>The dateSeparator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateSeparator { get; set; }
#nullable restore
#else
        public string DateSeparator { get; set; }
#endif
        /// <summary>The decimalSeparator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DecimalSeparator { get; set; }
#nullable restore
#else
        public string DecimalSeparator { get; set; }
#endif
        /// <summary>The digitGrouping property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DigitGrouping { get; set; }
#nullable restore
#else
        public string DigitGrouping { get; set; }
#endif
        /// <summary>The firstDayOfWeek property</summary>
        public int? FirstDayOfWeek { get; set; }
        /// <summary>The firstWeekOfYear property</summary>
        public int? FirstWeekOfYear { get; set; }
        /// <summary>The isEastAsia property</summary>
        public bool? IsEastAsia { get; set; }
        /// <summary>The isRightToLeft property</summary>
        public bool? IsRightToLeft { get; set; }
        /// <summary>The isUIRightToLeft property</summary>
        public bool? IsUIRightToLeft { get; set; }
        /// <summary>The listSeparator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListSeparator { get; set; }
#nullable restore
#else
        public string ListSeparator { get; set; }
#endif
        /// <summary>The localeId property</summary>
        public int? LocaleId { get; set; }
        /// <summary>The negativeSign property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NegativeSign { get; set; }
#nullable restore
#else
        public string NegativeSign { get; set; }
#endif
        /// <summary>The negNumberMode property</summary>
        public int? NegNumberMode { get; set; }
        /// <summary>The pm property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pm { get; set; }
#nullable restore
#else
        public string Pm { get; set; }
#endif
        /// <summary>The positiveSign property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PositiveSign { get; set; }
#nullable restore
#else
        public string PositiveSign { get; set; }
#endif
        /// <summary>The showWeeks property</summary>
        public bool? ShowWeeks { get; set; }
        /// <summary>The thousandSeparator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThousandSeparator { get; set; }
#nullable restore
#else
        public string ThousandSeparator { get; set; }
#endif
        /// <summary>The time24 property</summary>
        public bool? Time24 { get; set; }
        /// <summary>The timeMarkerPosition property</summary>
        public int? TimeMarkerPosition { get; set; }
        /// <summary>The timeSeparator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeSeparator { get; set; }
#nullable restore
#else
        public string TimeSeparator { get; set; }
#endif
        /// <summary>The timeZone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TimeZoneObject? TimeZone { get; set; }
#nullable restore
#else
        public TimeZoneObject TimeZone { get; set; }
#endif
        /// <summary>The workDayEndHour property</summary>
        public int? WorkDayEndHour { get; set; }
        /// <summary>The workDays property</summary>
        public int? WorkDays { get; set; }
        /// <summary>The workDayStartHour property</summary>
        public int? WorkDayStartHour { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RegionalSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RegionalSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RegionalSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"adjustHijriDays", n => { AdjustHijriDays = n.GetIntValue(); } },
                {"alternateCalendarType", n => { AlternateCalendarType = n.GetIntValue(); } },
                {"am", n => { Am = n.GetStringValue(); } },
                {"calendarType", n => { CalendarType = n.GetIntValue(); } },
                {"collation", n => { Collation = n.GetIntValue(); } },
                {"collationLCID", n => { CollationLCID = n.GetIntValue(); } },
                {"dateFormat", n => { DateFormat = n.GetIntValue(); } },
                {"dateSeparator", n => { DateSeparator = n.GetStringValue(); } },
                {"decimalSeparator", n => { DecimalSeparator = n.GetStringValue(); } },
                {"digitGrouping", n => { DigitGrouping = n.GetStringValue(); } },
                {"firstDayOfWeek", n => { FirstDayOfWeek = n.GetIntValue(); } },
                {"firstWeekOfYear", n => { FirstWeekOfYear = n.GetIntValue(); } },
                {"isEastAsia", n => { IsEastAsia = n.GetBoolValue(); } },
                {"isRightToLeft", n => { IsRightToLeft = n.GetBoolValue(); } },
                {"isUIRightToLeft", n => { IsUIRightToLeft = n.GetBoolValue(); } },
                {"listSeparator", n => { ListSeparator = n.GetStringValue(); } },
                {"localeId", n => { LocaleId = n.GetIntValue(); } },
                {"negNumberMode", n => { NegNumberMode = n.GetIntValue(); } },
                {"negativeSign", n => { NegativeSign = n.GetStringValue(); } },
                {"pm", n => { Pm = n.GetStringValue(); } },
                {"positiveSign", n => { PositiveSign = n.GetStringValue(); } },
                {"showWeeks", n => { ShowWeeks = n.GetBoolValue(); } },
                {"thousandSeparator", n => { ThousandSeparator = n.GetStringValue(); } },
                {"time24", n => { Time24 = n.GetBoolValue(); } },
                {"timeMarkerPosition", n => { TimeMarkerPosition = n.GetIntValue(); } },
                {"timeSeparator", n => { TimeSeparator = n.GetStringValue(); } },
                {"timeZone", n => { TimeZone = n.GetObjectValue<TimeZoneObject>(TimeZoneObject.CreateFromDiscriminatorValue); } },
                {"workDayEndHour", n => { WorkDayEndHour = n.GetIntValue(); } },
                {"workDayStartHour", n => { WorkDayStartHour = n.GetIntValue(); } },
                {"workDays", n => { WorkDays = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("adjustHijriDays", AdjustHijriDays);
            writer.WriteIntValue("alternateCalendarType", AlternateCalendarType);
            writer.WriteStringValue("am", Am);
            writer.WriteIntValue("calendarType", CalendarType);
            writer.WriteIntValue("collation", Collation);
            writer.WriteIntValue("collationLCID", CollationLCID);
            writer.WriteIntValue("dateFormat", DateFormat);
            writer.WriteStringValue("dateSeparator", DateSeparator);
            writer.WriteStringValue("decimalSeparator", DecimalSeparator);
            writer.WriteStringValue("digitGrouping", DigitGrouping);
            writer.WriteIntValue("firstDayOfWeek", FirstDayOfWeek);
            writer.WriteIntValue("firstWeekOfYear", FirstWeekOfYear);
            writer.WriteBoolValue("isEastAsia", IsEastAsia);
            writer.WriteBoolValue("isRightToLeft", IsRightToLeft);
            writer.WriteBoolValue("isUIRightToLeft", IsUIRightToLeft);
            writer.WriteStringValue("listSeparator", ListSeparator);
            writer.WriteIntValue("localeId", LocaleId);
            writer.WriteStringValue("negativeSign", NegativeSign);
            writer.WriteIntValue("negNumberMode", NegNumberMode);
            writer.WriteStringValue("pm", Pm);
            writer.WriteStringValue("positiveSign", PositiveSign);
            writer.WriteBoolValue("showWeeks", ShowWeeks);
            writer.WriteStringValue("thousandSeparator", ThousandSeparator);
            writer.WriteBoolValue("time24", Time24);
            writer.WriteIntValue("timeMarkerPosition", TimeMarkerPosition);
            writer.WriteStringValue("timeSeparator", TimeSeparator);
            writer.WriteObjectValue<TimeZoneObject>("timeZone", TimeZone);
            writer.WriteIntValue("workDayEndHour", WorkDayEndHour);
            writer.WriteIntValue("workDays", WorkDays);
            writer.WriteIntValue("workDayStartHour", WorkDayStartHour);
        }
    }
}
