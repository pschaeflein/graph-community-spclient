// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Graph.Community.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class HubSite : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The Description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID property</summary>
        public Guid? ID { get; set; }
        /// <summary>The LogoUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoUrl { get; set; }
#nullable restore
#else
        public string LogoUrl { get; set; }
#endif
        /// <summary>The SiteId property</summary>
        public Guid? SiteId { get; set; }
        /// <summary>The SiteUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SiteUrl { get; set; }
#nullable restore
#else
        public string SiteUrl { get; set; }
#endif
        /// <summary>The Targets property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Targets { get; set; }
#nullable restore
#else
        public string Targets { get; set; }
#endif
        /// <summary>The TenantInstanceId property</summary>
        public Guid? TenantInstanceId { get; set; }
        /// <summary>The Title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Graph.Community.Models.HubSite"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Graph.Community.Models.HubSite CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Graph.Community.Models.HubSite();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "Description", n => { Description = n.GetStringValue(); } },
                { "ID", n => { ID = n.GetGuidValue(); } },
                { "LogoUrl", n => { LogoUrl = n.GetStringValue(); } },
                { "SiteId", n => { SiteId = n.GetGuidValue(); } },
                { "SiteUrl", n => { SiteUrl = n.GetStringValue(); } },
                { "Targets", n => { Targets = n.GetStringValue(); } },
                { "TenantInstanceId", n => { TenantInstanceId = n.GetGuidValue(); } },
                { "Title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Description", Description);
            writer.WriteGuidValue("ID", ID);
            writer.WriteStringValue("LogoUrl", LogoUrl);
            writer.WriteGuidValue("SiteId", SiteId);
            writer.WriteStringValue("SiteUrl", SiteUrl);
            writer.WriteStringValue("Targets", Targets);
            writer.WriteGuidValue("TenantInstanceId", TenantInstanceId);
            writer.WriteStringValue("Title", Title);
        }
    }
}
#pragma warning restore CS0618
