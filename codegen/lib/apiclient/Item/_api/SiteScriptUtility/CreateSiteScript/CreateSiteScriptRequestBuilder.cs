// <auto-generated/>
#pragma warning disable CS0618
using Graph.Community.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript
{
    /// <summary>
    /// Builds and executes requests for operations under \{serverRelativeSiteUrl}\_api\SiteScriptUtility\CreateSiteScript(Title=@title,Description=@description)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CreateSiteScriptRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CreateSiteScriptRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{serverRelativeSiteUrl}/_api/Microsoft.SharePoint.Utilities.WebTemplateExtensions.SiteScriptUtility.CreateSiteScript(Title=@title,Description=@description)?@description={%40description}&@title={%40title}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CreateSiteScriptRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{serverRelativeSiteUrl}/_api/Microsoft.SharePoint.Utilities.WebTemplateExtensions.SiteScriptUtility.CreateSiteScript(Title=@title,Description=@description)?@description={%40description}&@title={%40title}", rawUrl)
        {
        }
        /// <summary>
        /// Creates a new site script.
        /// </summary>
        /// <returns>A <see cref="global::Graph.Community.Models.SiteScriptMetadata"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Graph.Community.Models.SiteScriptMetadata?> PostAsync(global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptPostRequestBody body, Action<RequestConfiguration<global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptRequestBuilder.CreateSiteScriptRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Graph.Community.Models.SiteScriptMetadata> PostAsync(global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptPostRequestBody body, Action<RequestConfiguration<global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptRequestBuilder.CreateSiteScriptRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Graph.Community.Models.SiteScriptMetadata>(requestInfo, global::Graph.Community.Models.SiteScriptMetadata.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new site script.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptPostRequestBody body, Action<RequestConfiguration<global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptRequestBuilder.CreateSiteScriptRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptPostRequestBody body, Action<RequestConfiguration<global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptRequestBuilder.CreateSiteScriptRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Graph.Community.Item._api.SiteScriptUtility.CreateSiteScript.CreateSiteScriptRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Creates a new site script.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CreateSiteScriptRequestBuilderPostQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%40description")]
            public string? Description { get; set; }
#nullable restore
#else
            [QueryParameter("%40description")]
            public string Description { get; set; }
#endif
            /// <summary>The display name of the site design.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%40title")]
            public string? Title { get; set; }
#nullable restore
#else
            [QueryParameter("%40title")]
            public string Title { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
